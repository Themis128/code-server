diff --git a/vscode-1.56.2/.eslintignore b/vscode/.eslintignore
index 8b93a41..b67a816 100644
--- a/vscode-1.56.2/.eslintignore
+++ b/vscode/.eslintignore
@@ -16,3 +16,7 @@
 **/extensions/markdown-language-features/notebook-out/**
 **/extensions/typescript-basics/test/colorize-fixtures/**
 **/extensions/**/dist/**
+# These are code-server code symlinks.
+src/vs/base/node/proxy_agent.ts
+src/vs/ipc.d.ts
+src/vs/server/common/util.ts
diff --git a/vscode-1.56.2/.eslintrc.json b/vscode/.eslintrc.json
index fb2e489..e7ff9be 100644
--- a/vscode-1.56.2/.eslintrc.json
+++ b/vscode/.eslintrc.json
@@ -62,7 +62,7 @@
 		"code-no-standalone-editor": "warn",
 		"code-no-unexternalized-strings": "warn",
 		"code-layering": [
-			"warn",
+			"off",
 			{
 				"common": [],
 				"node": [
@@ -88,7 +88,7 @@
 			}
 		],
 		"code-import-patterns": [
-			"warn",
+			"off",
 			// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
 			// !!! Do not relax these rules !!!
 			// !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
diff --git a/vscode-1.56.2/.gitignore b/vscode/.gitignore
index 11a7486..c536813 100644
--- a/vscode-1.56.2/.gitignore
+++ b/vscode/.gitignore
@@ -7,7 +7,7 @@ node_modules/
 extensions/**/dist/
 /out*/
 /extensions/**/out/
-src/vs/server
+# src/vs/server NOTE@coder: So our code isn't ignored.
 resources/server
 build/node_modules
 coverage/
diff --git a/vscode-1.56.2/build/gulpfile.reh.js b/vscode/build/gulpfile.reh.js
index 387a54c..6230916 100644
--- a/vscode-1.56.2/build/gulpfile.reh.js
+++ b/vscode/build/gulpfile.reh.js
@@ -42,6 +42,7 @@ BUILD_TARGETS.forEach(({ platform, arch }) => {
 });
 
 function getNodeVersion() {
+	return process.versions.node;
 	const yarnrc = fs.readFileSync(path.join(REPO_ROOT, 'remote', '.yarnrc'), 'utf8');
 	const target = /^target "(.*)"$/m.exec(yarnrc)[1];
 	return target;
diff --git a/vscode-1.56.2/build/lib/extensions.ts b/vscode/build/lib/extensions.ts
index 6a3c78c..ec5c7d0 100644
--- a/vscode-1.56.2/build/lib/extensions.ts
+++ b/vscode/build/lib/extensions.ts
@@ -65,7 +65,7 @@ function fromLocal(extensionPath: string, forWeb: boolean): Stream {
 	if (isWebPacked) {
 		input = updateExtensionPackageJSON(input, (data: any) => {
 			delete data.scripts;
-			delete data.dependencies;
+			// https://github.com/cdr/code-server/pull/2041#issuecomment-685910322
 			delete data.devDependencies;
 			if (data.main) {
 				data.main = data.main.replace('/out/', /dist/);
diff --git a/vscode-1.56.2/build/lib/node.ts b/vscode/build/lib/node.ts
index 6ac45eb..20389c6 100644
--- a/vscode-1.56.2/build/lib/node.ts
+++ b/vscode/build/lib/node.ts
@@ -4,14 +4,11 @@
  *--------------------------------------------------------------------------------------------*/
 
 import * as path from 'path';
-import * as fs from 'fs';
 
 const root = path.dirname(path.dirname(__dirname));
-const yarnrcPath = path.join(root, 'remote', '.yarnrc');
-const yarnrc = fs.readFileSync(yarnrcPath, 'utf8');
-const version = /^target\s+"([^"]+)"$/m.exec(yarnrc)![1];
-
+const version = process.versions.node;
 const platform = process.platform;
+
 const arch = platform === 'darwin' ? 'x64' : process.arch;
 
 const node = platform === 'win32' ? 'node.exe' : 'node';
diff --git a/vscode-1.56.2/build/lib/util.ts b/vscode/build/lib/util.ts
index c0a0d96..48853bc 100644
--- a/vscode-1.56.2/build/lib/util.ts
+++ b/vscode/build/lib/util.ts
@@ -336,6 +336,7 @@ export function streamToPromise(stream: NodeJS.ReadWriteStream): Promise<void> {
 }
 
 export function getElectronVersion(): string {
+	return process.versions.node;
 	const yarnrc = fs.readFileSync(path.join(root, '.yarnrc'), 'utf8');
 	const target = /^target "(.*)"$/m.exec(yarnrc)![1];
 	return target;
diff --git a/vscode-1.56.2/build/package.json b/vscode/build/package.json
index cd119a5..9c1e9e3 100644
--- a/vscode-1.56.2/build/package.json
+++ b/vscode/build/package.json
@@ -3,8 +3,6 @@
   "version": "1.0.0",
   "license": "MIT",
   "devDependencies": {
-    "@azure/cosmos": "^3.9.3",
-    "@azure/storage-blob": "^12.4.0",
     "@types/ansi-colors": "^3.2.0",
     "@types/azure": "0.9.19",
     "@types/byline": "^4.2.32",
@@ -37,11 +35,9 @@
     "@typescript-eslint/experimental-utils": "~2.13.0",
     "@typescript-eslint/parser": "^3.3.0",
     "applicationinsights": "1.0.8",
-    "azure-storage": "^2.1.0",
     "byline": "^5.0.0",
     "colors": "^1.4.0",
     "commander": "^7.0.0",
-    "electron-osx-sign": "^0.4.16",
     "esbuild": "^0.8.30",
     "fs-extra": "^9.1.0",
     "got": "11.8.1",
@@ -50,10 +46,9 @@
     "mime": "^1.4.1",
     "mkdirp": "^1.0.4",
     "p-limit": "^3.1.0",
-    "plist": "^3.0.1",
     "source-map": "0.6.1",
     "typescript": "^4.3.0-dev.20210426",
-    "vsce": "1.48.0",
+    "vsce": "1.88.0",
     "vscode-universal": "deepak1556/universal#61454d96223b774c53cda10f72c2098c0ce02d58"
   },
   "scripts": {
diff --git a/vscode-1.56.2/extensions/github-authentication/src/githubServer.ts b/vscode/extensions/github-authentication/src/githubServer.ts
index 40877ef..4fdafe0 100644
--- a/vscode-1.56.2/extensions/github-authentication/src/githubServer.ts
+++ b/vscode/extensions/github-authentication/src/githubServer.ts
@@ -14,7 +14,8 @@ import { ExperimentationTelemetry } from './experimentationService';
 const localize = nls.loadMessageBundle();
 
 export const NETWORK_ERROR = 'network error';
-const AUTH_RELAY_SERVER = 'vscode-auth.github.com';
+// NOTE@coder: use our own auth relay (the commented one is microsoft's, not ours)
+const AUTH_RELAY_SERVER = 'auth.code-server.dev';
 // const AUTH_RELAY_STAGING_SERVER = 'client-auth-staging-14a768b.herokuapp.com';
 
 class UriEventHandler extends vscode.EventEmitter<vscode.Uri> implements vscode.UriHandler {
diff --git a/vscode-1.56.2/extensions/github-authentication/src/typings/ref.d.ts b/vscode/extensions/github-authentication/src/typings/ref.d.ts
index c9849d4..dfd710c 100644
--- a/vscode-1.56.2/extensions/github-authentication/src/typings/ref.d.ts
+++ b/vscode/extensions/github-authentication/src/typings/ref.d.ts
@@ -5,3 +5,6 @@
 
 /// <reference path='../../../../src/vs/vscode.d.ts'/>
 /// <reference path='../../../../src/vs/vscode.proposed.d.ts'/>
+/// <reference path='../../../../src/typings/keytar.d.ts'/>
+
+// NOTE@coder: add keytar typeref
diff --git a/vscode-1.56.2/extensions/microsoft-authentication/src/typings/refs.d.ts b/vscode/extensions/microsoft-authentication/src/typings/refs.d.ts
index c9849d4..dfd710c 100644
--- a/vscode-1.56.2/extensions/microsoft-authentication/src/typings/refs.d.ts
+++ b/vscode/extensions/microsoft-authentication/src/typings/refs.d.ts
@@ -5,3 +5,6 @@
 
 /// <reference path='../../../../src/vs/vscode.d.ts'/>
 /// <reference path='../../../../src/vs/vscode.proposed.d.ts'/>
+/// <reference path='../../../../src/typings/keytar.d.ts'/>
+
+// NOTE@coder: add keytar typeref
diff --git a/vscode-1.56.2/extensions/postinstall.js b/vscode/extensions/postinstall.js
index da4fa3e..50f3e11 100644
--- a/vscode-1.56.2/extensions/postinstall.js
+++ b/vscode/extensions/postinstall.js
@@ -24,6 +24,9 @@ function processRoot() {
 			rimraf.sync(filePath);
 		}
 	}
+
+	// Delete .bin so it doesn't contain broken symlinks that trip up nfpm.
+	rimraf.sync(path.join(__dirname, 'node_modules', '.bin'));
 }
 
 function processLib() {
diff --git a/vscode-1.56.2/package.json b/vscode/package.json
index f53ae4c..7c0337f 100644
--- a/vscode-1.56.2/package.json
+++ b/vscode/package.json
@@ -59,7 +59,9 @@
     "core-ci": "node --max_old_space_size=4095 ./node_modules/gulp/bin/gulp.js core-ci",
     "extensions-ci": "node --max_old_space_size=4095 ./node_modules/gulp/bin/gulp.js extensions-ci"
   },
+  "dependencies_comment": "Move rimraf to dependencies because it is used in the postinstall script.",
   "dependencies": {
+    "@coder/logger": "^1.1.16",
     "applicationinsights": "1.0.8",
     "chokidar": "3.5.1",
     "graceful-fs": "4.2.3",
@@ -67,13 +69,14 @@
     "https-proxy-agent": "^2.2.3",
     "iconv-lite-umd": "0.6.8",
     "jschardet": "2.3.0",
-    "keytar": "7.2.0",
     "minimist": "^1.2.5",
     "native-is-elevated": "0.4.3",
-    "native-keymap": "2.2.1",
     "native-watchdog": "1.3.0",
     "node-pty": "0.10.1",
     "nsfw": "2.1.2",
+    "proxy-agent": "^4.0.1",
+    "proxy-from-env": "^1.1.0",
+    "rimraf": "^3.0.2",
     "spdlog": "^0.11.1",
     "sudo-prompt": "9.2.1",
     "tas-client-umd": "0.1.4",
@@ -91,6 +94,7 @@
     "yauzl": "^2.9.2",
     "yazl": "^2.4.3"
   },
+  "devDependencies_comment": "set gulp-rename to ~1.2.0 (instead of ^1.2.0), build breaks on 1.4.4",
   "devDependencies": {
     "7zip": "0.0.6",
     "@types/applicationinsights": "0.20.0",
@@ -102,7 +106,6 @@
     "@types/graceful-fs": "4.1.2",
     "@types/gulp-postcss": "^8.0.0",
     "@types/http-proxy-agent": "^2.0.1",
-    "@types/keytar": "^4.4.0",
     "@types/minimist": "^1.2.1",
     "@types/mocha": "^8.2.0",
     "@types/node": "^14.14.37",
@@ -125,10 +128,10 @@
     "copy-webpack-plugin": "^6.0.3",
     "cson-parser": "^1.3.3",
     "css-loader": "^3.2.0",
-    "cssnano": "^4.1.11",
+    "cssnano": "^5.0.2",
+    "postcss": "^8.2.1",
     "debounce": "^1.0.0",
     "deemon": "^1.4.0",
-    "electron": "12.0.4",
     "eslint": "6.8.0",
     "eslint-plugin-jsdoc": "^19.1.0",
     "event-stream": "3.3.4",
@@ -138,7 +141,6 @@
     "glob": "^5.0.13",
     "gulp": "^4.0.0",
     "gulp-atom-electron": "^1.30.1",
-    "gulp-azure-storage": "^0.11.1",
     "gulp-bom": "^3.0.0",
     "gulp-buffer": "0.0.2",
     "gulp-concat": "^2.6.1",
@@ -151,7 +153,7 @@
     "gulp-plumber": "^1.2.0",
     "gulp-postcss": "^9.0.0",
     "gulp-remote-retry-src": "^0.6.0",
-    "gulp-rename": "^1.2.0",
+    "gulp-rename": "~1.2.0",
     "gulp-replace": "^0.5.4",
     "gulp-shell": "^0.6.5",
     "gulp-sourcemaps": "^3.0.0",
@@ -185,7 +187,6 @@
     "queue": "3.0.6",
     "rcedit": "^1.1.0",
     "request": "^2.85.0",
-    "rimraf": "^2.2.8",
     "sinon": "^1.17.2",
     "source-map": "0.6.1",
     "source-map-support": "^0.3.2",
@@ -194,7 +195,7 @@
     "tsec": "0.1.4",
     "typescript": "^4.3.0-dev.20210426",
     "typescript-formatter": "7.1.0",
-    "underscore": "^1.8.2",
+    "underscore": "^1.12.1",
     "vinyl": "^2.0.0",
     "vinyl-fs": "^3.0.0",
     "vscode-debugprotocol": "1.47.0",
@@ -220,6 +221,7 @@
     "windows-process-tree": "0.3.0"
   },
   "resolutions": {
+    "postcss": "^8.2.1",
     "elliptic": "^6.5.3",
     "nwmatcher": "^1.4.4"
   }
diff --git a/vscode-1.56.2/product.json b/vscode/product.json
index 30c5137..7a9e63c 100644
--- a/vscode-1.56.2/product.json
+++ b/vscode/product.json
@@ -1,6 +1,6 @@
 {
-	"nameShort": "Code - OSS",
-	"nameLong": "Code - OSS",
+	"nameShort": "code-server",
+	"nameLong": "code-server",
 	"applicationName": "code-oss",
 	"dataFolderName": ".vscode-oss",
 	"win32MutexName": "vscodeoss",
@@ -20,7 +20,7 @@
 	"darwinBundleIdentifier": "com.visualstudio.code.oss",
 	"linuxIconName": "com.visualstudio.code.oss",
 	"licenseFileName": "LICENSE.txt",
-	"reportIssueUrl": "https://github.com/microsoft/vscode/issues/new",
+	"reportIssueUrl": "https://github.com/cdr/code-server/issues/new",
 	"urlProtocol": "code-oss",
 	"extensionAllowedProposedApi": [
 		"ms-vscode.vscode-js-profile-flame",
@@ -153,5 +153,14 @@
 				"publisherDisplayName": "Microsoft"
 			}
 		}
-	]
+	],
+
+	"//": "https://github.com/VSCodium/vscodium/pull/155/files",
+	"documentationUrl": "https://go.microsoft.com/fwlink/?LinkID=533484#vscode",
+	"keyboardShortcutsUrlMac": "https://go.microsoft.com/fwlink/?linkid=832143",
+	"keyboardShortcutsUrlLinux": "https://go.microsoft.com/fwlink/?linkid=832144",
+	"keyboardShortcutsUrlWin": "https://go.microsoft.com/fwlink/?linkid=832145",
+	"introductoryVideosUrl": "https://go.microsoft.com/fwlink/?linkid=832146",
+	"tipsAndTricksUrl": "https://go.microsoft.com/fwlink/?linkid=852118",
+	"newsletterSignupUrl": "https://www.research.net/r/vsc-newsletter"
 }
diff --git a/vscode-1.56.2/src/vs/base/common/network.ts b/vscode/src/vs/base/common/network.ts
index 0e6e28a..5833339 100644
--- a/vscode-1.56.2/src/vs/base/common/network.ts
+++ b/vscode/src/vs/base/common/network.ts
@@ -125,16 +125,17 @@ class RemoteAuthoritiesImpl {
 		if (host && host.indexOf(':') !== -1) {
 			host = `[${host}]`;
 		}
-		const port = this._ports[authority];
+		// const port = this._ports[authority];
 		const connectionToken = this._connectionTokens[authority];
 		let query = `path=${encodeURIComponent(uri.path)}`;
 		if (typeof connectionToken === 'string') {
 			query += `&tkn=${encodeURIComponent(connectionToken)}`;
 		}
+		// NOTE@coder: Changed this to work against the current path.
 		return URI.from({
 			scheme: platform.isWeb ? this._preferredWebSchema : Schemas.vscodeRemoteResource,
-			authority: `${host}:${port}`,
-			path: `/vscode-remote-resource`,
+			authority: window.location.host,
+			path: `${window.location.pathname.replace(/\/+$/, '')}/vscode-remote-resource`,
 			query
 		});
 	}
diff --git a/vscode-1.56.2/src/vs/base/common/platform.ts b/vscode/src/vs/base/common/platform.ts
index 5bbdbe9..2bdfc7e 100644
--- a/vscode-1.56.2/src/vs/base/common/platform.ts
+++ b/vscode/src/vs/base/common/platform.ts
@@ -101,6 +101,18 @@ if (typeof navigator === 'object' && !isElectronRenderer) {
 	_isWeb = true;
 	_locale = navigator.language;
 	_language = _locale;
+
+	// NOTE@coder: Make languages work.
+	const el = typeof document !== 'undefined' && document.getElementById('vscode-remote-nls-configuration');
+	const rawNlsConfig = el && el.getAttribute('data-settings');
+	if (rawNlsConfig) {
+		try {
+			const nlsConfig: NLSConfig = JSON.parse(rawNlsConfig);
+			_locale = nlsConfig.locale;
+			_translationsConfigFile = nlsConfig._translationsConfigFile;
+			_language = nlsConfig.availableLanguages['*'] || LANGUAGE_DEFAULT;
+		} catch (error) { /* Oh well. */ }
+	}
 }
 
 // Native environment
diff --git a/vscode-1.56.2/src/vs/base/common/processes.ts b/vscode/src/vs/base/common/processes.ts
index 6c52c3f..6b84dbe 100644
--- a/vscode-1.56.2/src/vs/base/common/processes.ts
+++ b/vscode/src/vs/base/common/processes.ts
@@ -111,6 +111,7 @@ export function sanitizeProcessEnvironment(env: IProcessEnvironment, ...preserve
 		/^VSCODE_.+$/,
 		/^SNAP(|_.*)$/,
 		/^GDK_PIXBUF_.+$/,
+		/^CODE_SERVER_.+$/,
 	];
 	const envKeys = Object.keys(env);
 	envKeys
diff --git a/vscode-1.56.2/src/vs/base/common/product.ts b/vscode/src/vs/base/common/product.ts
index 129b8de..9bfd5ae 100644
--- a/vscode-1.56.2/src/vs/base/common/product.ts
+++ b/vscode/src/vs/base/common/product.ts
@@ -26,6 +26,9 @@ export type ExtensionUntrustedWorkspaceSupport = {
 };
 
 export interface IProductConfiguration {
+	// NOTE@coder: add codeServerVersion
+	readonly codeServerVersion?: string;
+
 	readonly version: string;
 	readonly date?: string;
 	readonly quality?: string;
diff --git a/vscode-1.56.2/src/vs/base/common/uriIpc.ts b/vscode/src/vs/base/common/uriIpc.ts
index ef2291d..29b2f9d 100644
--- a/vscode-1.56.2/src/vs/base/common/uriIpc.ts
+++ b/vscode/src/vs/base/common/uriIpc.ts
@@ -5,6 +5,7 @@
 
 import { URI, UriComponents } from 'vs/base/common/uri';
 import { MarshalledObject } from 'vs/base/common/marshalling';
+import { Schemas } from './network';
 
 export interface IURITransformer {
 	transformIncoming(uri: UriComponents): UriComponents;
@@ -31,29 +32,35 @@ function toJSON(uri: URI): UriComponents {
 
 export class URITransformer implements IURITransformer {
 
-	private readonly _uriTransformer: IRawURITransformer;
-
-	constructor(uriTransformer: IRawURITransformer) {
-		this._uriTransformer = uriTransformer;
+	constructor(private readonly remoteAuthority: string) {
 	}
 
+	// NOTE@coder: Coming in from the browser it'll be vscode-remote so it needs
+	// to be transformed into file.
 	public transformIncoming(uri: UriComponents): UriComponents {
-		const result = this._uriTransformer.transformIncoming(uri);
-		return (result === uri ? uri : toJSON(URI.from(result)));
+		return uri.scheme === Schemas.vscodeRemote
+			? toJSON(URI.file(uri.path))
+			: uri;
 	}
 
+	// NOTE@coder: Going out to the browser it'll be file so it needs to be
+	// transformed into vscode-remote.
 	public transformOutgoing(uri: UriComponents): UriComponents {
-		const result = this._uriTransformer.transformOutgoing(uri);
-		return (result === uri ? uri : toJSON(URI.from(result)));
+		return uri.scheme === Schemas.file
+			? toJSON(URI.from({ authority: this.remoteAuthority, scheme: Schemas.vscodeRemote, path: uri.path }))
+			: uri;
 	}
 
 	public transformOutgoingURI(uri: URI): URI {
-		const result = this._uriTransformer.transformOutgoing(uri);
-		return (result === uri ? uri : URI.from(result));
+		return uri.scheme === Schemas.file
+			? URI.from({ authority: this.remoteAuthority, scheme: Schemas.vscodeRemote, path:uri.path })
+			: uri;
 	}
 
 	public transformOutgoingScheme(scheme: string): string {
-		return this._uriTransformer.transformOutgoingScheme(scheme);
+		return scheme === Schemas.file
+			? Schemas.vscodeRemote
+			: scheme;
 	}
 }
 
@@ -152,4 +159,4 @@ export function transformAndReviveIncomingURIs<T>(obj: T, transformer: IURITrans
 		return obj;
 	}
 	return result;
-}
\ No newline at end of file
+}
diff --git a/vscode-1.56.2/src/vs/base/node/languagePacks.js b/vscode/src/vs/base/node/languagePacks.js
index 5c14fad..0899cab 100644
--- a/vscode-1.56.2/src/vs/base/node/languagePacks.js
+++ b/vscode/src/vs/base/node/languagePacks.js
@@ -73,7 +73,10 @@
 		function getLanguagePackConfigurations(userDataPath) {
 			const configFile = path.join(userDataPath, 'languagepacks.json');
 			try {
-				return nodeRequire(configFile);
+				// NOTE@coder: Swapped require with readFile since require is cached and
+				// we don't restart the server-side portion of code-server when the
+				// language changes.
+				return JSON.parse(fs.readFileSync(configFile, 'utf8'));
 			} catch (err) {
 				// Do nothing. If we can't read the file we have no
 				// language pack config.
diff --git a/vscode-1.56.2/src/vs/base/parts/ipc/common/ipc.net.ts b/vscode/src/vs/base/parts/ipc/common/ipc.net.ts
index aad4fb4..0e88c44 100644
--- a/vscode-1.56.2/src/vs/base/parts/ipc/common/ipc.net.ts
+++ b/vscode/src/vs/base/parts/ipc/common/ipc.net.ts
@@ -743,6 +743,11 @@ export class PersistentProtocol implements IMessagePassingProtocol {
 		}, Math.max(ProtocolConstants.KeepAliveTimeoutTime - timeSinceLastIncomingMsg, 0) + 5);
 	}
 
+	// NOTE@coder: Set the socket without initiating a reconnect.
+	public setSocket(socket: ISocket): void {
+		this._socket = socket;
+	}
+
 	public getSocket(): ISocket {
 		return this._socket;
 	}
diff --git a/vscode-1.56.2/src/vs/code/browser/workbench/workbench.ts b/vscode/src/vs/code/browser/workbench/workbench.ts
index 4aebea3..e525a92 100644
--- a/vscode-1.56.2/src/vs/code/browser/workbench/workbench.ts
+++ b/vscode/src/vs/code/browser/workbench/workbench.ts
@@ -3,7 +3,7 @@
  *  Licensed under the MIT License. See License.txt in the project root for license information.
  *--------------------------------------------------------------------------------------------*/
 
-import { IWorkbenchConstructionOptions, create, ICredentialsProvider, IURLCallbackProvider, IWorkspaceProvider, IWorkspace, IWindowIndicator, IHomeIndicator, IProductQualityChangeHandler, ISettingsSyncOptions } from 'vs/workbench/workbench.web.api';
+import { IWorkbenchConstructionOptions, create, ICredentialsProvider, IURLCallbackProvider, IWorkspaceProvider, IWorkspace, IWindowIndicator, IProductQualityChangeHandler, ISettingsSyncOptions } from 'vs/workbench/workbench.web.api';
 import { URI, UriComponents } from 'vs/base/common/uri';
 import { Event, Emitter } from 'vs/base/common/event';
 import { generateUuid } from 'vs/base/common/uuid';
@@ -17,7 +17,7 @@ import { isStandalone } from 'vs/base/browser/browser';
 import { localize } from 'vs/nls';
 import { Schemas } from 'vs/base/common/network';
 import product from 'vs/platform/product/common/product';
-import { parseLogLevel } from 'vs/platform/log/common/log';
+import { encodePath } from 'vs/server/node/util';
 
 function doCreateUri(path: string, queryValues: Map<string, string>): URI {
 	let query: string | undefined = undefined;
@@ -316,12 +316,18 @@ class WorkspaceProvider implements IWorkspaceProvider {
 
 		// Folder
 		else if (isFolderToOpen(workspace)) {
-			targetHref = `${document.location.origin}${document.location.pathname}?${WorkspaceProvider.QUERY_PARAM_FOLDER}=${encodeURIComponent(workspace.folderUri.toString())}`;
+			const target = workspace.folderUri.scheme === Schemas.vscodeRemote
+				? encodePath(workspace.folderUri.path)
+				: encodeURIComponent(workspace.folderUri.toString());
+			targetHref = `${document.location.origin}${document.location.pathname}?${WorkspaceProvider.QUERY_PARAM_FOLDER}=${target}`;
 		}
 
 		// Workspace
 		else if (isWorkspaceToOpen(workspace)) {
-			targetHref = `${document.location.origin}${document.location.pathname}?${WorkspaceProvider.QUERY_PARAM_WORKSPACE}=${encodeURIComponent(workspace.workspaceUri.toString())}`;
+			const target = workspace.workspaceUri.scheme === Schemas.vscodeRemote
+				? encodePath(workspace.workspaceUri.path)
+				: encodeURIComponent(workspace.workspaceUri.toString());
+			targetHref = `${document.location.origin}${document.location.pathname}?${WorkspaceProvider.QUERY_PARAM_WORKSPACE}=${target}`;
 		}
 
 		// Append payload if any
@@ -411,51 +417,27 @@ class WindowIndicator implements IWindowIndicator {
 		throw new Error('Missing web configuration element');
 	}
 
-	const config: IWorkbenchConstructionOptions & { folderUri?: UriComponents, workspaceUri?: UriComponents } = JSON.parse(configElementAttribute);
+	const config: IWorkbenchConstructionOptions & { folderUri?: UriComponents, workspaceUri?: UriComponents } = {
+		webviewEndpoint: `${window.location.origin}${window.location.pathname.replace(/\/+$/, '')}/webview`,
+		...JSON.parse(configElementAttribute),
+	};
+
+	// Strip the protocol from the authority if it exists.
+	const normalizeAuthority = (authority: string): string => authority.replace(/^https?:\/\//, '');
+	if (config.remoteAuthority) {
+		(config as any).remoteAuthority = normalizeAuthority(config.remoteAuthority);
+	}
+	if (config.workspaceUri && config.workspaceUri.authority) {
+		config.workspaceUri.authority = normalizeAuthority(config.workspaceUri.authority);
+	}
+	if (config.folderUri && config.folderUri.authority) {
+		config.folderUri.authority = normalizeAuthority(config.folderUri.authority);
+	}
 
 	// Find workspace to open and payload
 	let foundWorkspace = false;
 	let workspace: IWorkspace;
-	let payload = Object.create(null);
-	let logLevel: string | undefined = undefined;
-
-	const query = new URL(document.location.href).searchParams;
-	query.forEach((value, key) => {
-		switch (key) {
-
-			// Folder
-			case WorkspaceProvider.QUERY_PARAM_FOLDER:
-				workspace = { folderUri: URI.parse(value) };
-				foundWorkspace = true;
-				break;
-
-			// Workspace
-			case WorkspaceProvider.QUERY_PARAM_WORKSPACE:
-				workspace = { workspaceUri: URI.parse(value) };
-				foundWorkspace = true;
-				break;
-
-			// Empty
-			case WorkspaceProvider.QUERY_PARAM_EMPTY_WINDOW:
-				workspace = undefined;
-				foundWorkspace = true;
-				break;
-
-			// Payload
-			case WorkspaceProvider.QUERY_PARAM_PAYLOAD:
-				try {
-					payload = JSON.parse(value);
-				} catch (error) {
-					console.error(error); // possible invalid JSON
-				}
-				break;
-
-			// Log level
-			case 'logLevel':
-				logLevel = value;
-				break;
-		}
-	});
+	let payload = config.workspaceProvider?.payload || Object.create(null);
 
 	// If no workspace is provided through the URL, check for config attribute from server
 	if (!foundWorkspace) {
@@ -471,13 +453,6 @@ class WindowIndicator implements IWindowIndicator {
 	// Workspace Provider
 	const workspaceProvider = new WorkspaceProvider(workspace, payload);
 
-	// Home Indicator
-	const homeIndicator: IHomeIndicator = {
-		href: 'https://github.com/microsoft/vscode',
-		icon: 'code',
-		title: localize('home', "Home")
-	};
-
 	// Window indicator (unless connected to a remote)
 	let windowIndicator: WindowIndicator | undefined = undefined;
 	if (!workspaceProvider.hasRemote()) {
@@ -520,12 +495,7 @@ class WindowIndicator implements IWindowIndicator {
 	// Finally create workbench
 	create(document.body, {
 		...config,
-		developmentOptions: {
-			logLevel: logLevel ? parseLogLevel(logLevel) : undefined,
-			...config.developmentOptions
-		},
 		settingsSyncOptions,
-		homeIndicator,
 		windowIndicator,
 		productQualityChangeHandler,
 		workspaceProvider,
diff --git a/vscode-1.56.2/src/vs/platform/environment/common/argv.ts b/vscode/src/vs/platform/environment/common/argv.ts
index 2628fa7..07cd886 100644
--- a/vscode-1.56.2/src/vs/platform/environment/common/argv.ts
+++ b/vscode/src/vs/platform/environment/common/argv.ts
@@ -7,6 +7,8 @@
  * A list of command line arguments we support natively.
  */
 export interface NativeParsedArgs {
+	'extra-extensions-dir'?: string[];
+	'extra-builtin-extensions-dir'?: string[];
 	_: string[];
 	'folder-uri'?: string[]; // undefined or array of 1 or more
 	'file-uri'?: string[]; // undefined or array of 1 or more
diff --git a/vscode-1.56.2/src/vs/platform/environment/common/environment.ts b/vscode/src/vs/platform/environment/common/environment.ts
index a10b16f..3161ff3 100644
--- a/vscode-1.56.2/src/vs/platform/environment/common/environment.ts
+++ b/vscode/src/vs/platform/environment/common/environment.ts
@@ -121,6 +121,8 @@ export interface INativeEnvironmentService extends IEnvironmentService {
 	extensionsPath: string;
 	extensionsDownloadPath: string;
 	builtinExtensionsPath: string;
+	extraExtensionPaths: string[]
+	extraBuiltinExtensionPaths: string[]
 
 	// --- smoke test support
 	driverHandle?: string;
diff --git a/vscode-1.56.2/src/vs/platform/environment/common/environmentService.ts b/vscode/src/vs/platform/environment/common/environmentService.ts
index 9fc2f17..cee37bf 100644
--- a/vscode-1.56.2/src/vs/platform/environment/common/environmentService.ts
+++ b/vscode/src/vs/platform/environment/common/environmentService.ts
@@ -15,6 +15,23 @@ import { URI } from 'vs/base/common/uri';
 import { ExtensionKind } from 'vs/platform/extensions/common/extensions';
 import { env } from 'vs/base/common/process';
 
+
+function parsePathArg(arg: string | undefined, process: NodeJS.Process): string | undefined {
+	if (!arg) {
+		return undefined;
+	}
+
+	// Determine if the arg is relative or absolute, if relative use the original CWD
+	// (VSCODE_CWD), not the potentially overridden one (process.cwd()).
+	const resolved = resolve(arg);
+
+	if (normalize(arg) === resolved) {
+		return resolved;
+	}
+
+	return resolve(process.env['VSCODE_CWD'] || process.cwd(), arg);
+}
+
 export interface INativeEnvironmentPaths {
 
 	/**
@@ -173,6 +190,19 @@ export abstract class AbstractNativeEnvironmentService implements INativeEnviron
 		return undefined;
 	}
 
+	/**
+	 * NOTE@coder: add extraExtensionPaths and extraBuiltinExtensionPaths
+	 */
+	@memoize
+	get extraExtensionPaths(): string[] {
+		return (this._args['extra-extensions-dir'] || []).map((p) => <string>parsePathArg(p, process));
+	}
+
+	@memoize
+	get extraBuiltinExtensionPaths(): string[] {
+		return (this._args['extra-builtin-extensions-dir'] || []).map((p) => <string>parsePathArg(p, process));
+	}
+
 	@memoize
 	get extensionDevelopmentKind(): ExtensionKind[] | undefined {
 		return this.args.extensionDevelopmentKind?.map(kind => kind === 'ui' || kind === 'workspace' || kind === 'web' ? kind : 'workspace');
diff --git a/vscode-1.56.2/src/vs/platform/environment/node/argv.ts b/vscode/src/vs/platform/environment/node/argv.ts
index 1b5db38..faf8cfa 100644
--- a/vscode-1.56.2/src/vs/platform/environment/node/argv.ts
+++ b/vscode/src/vs/platform/environment/node/argv.ts
@@ -52,6 +52,8 @@ export const OPTIONS: OptionDescriptions<Required<NativeParsedArgs>> = {
 	'extensions-dir': { type: 'string', deprecates: 'extensionHomePath', cat: 'e', args: 'dir', description: localize('extensionHomePath', "Set the root path for extensions.") },
 	'extensions-download-dir': { type: 'string' },
 	'builtin-extensions-dir': { type: 'string' },
+	'extra-builtin-extensions-dir': { type: 'string[]', cat: 'o', description: 'Path to an extra builtin extension directory.' },
+	'extra-extensions-dir': { type: 'string[]', cat: 'o', description: 'Path to an extra user extension directory.' },
 	'list-extensions': { type: 'boolean', cat: 'e', description: localize('listExtensions', "List the installed extensions.") },
 	'show-versions': { type: 'boolean', cat: 'e', description: localize('showVersions', "Show versions of installed extensions, when using --list-extensions.") },
 	'category': { type: 'string', cat: 'e', description: localize('category', "Filters installed extensions by provided category, when using --list-extensions.") },
diff --git a/vscode-1.56.2/src/vs/platform/extensionManagement/node/extensionDownloader.ts b/vscode/src/vs/platform/extensionManagement/node/extensionDownloader.ts
index f118888..53b5f31 100644
--- a/vscode-1.56.2/src/vs/platform/extensionManagement/node/extensionDownloader.ts
+++ b/vscode/src/vs/platform/extensionManagement/node/extensionDownloader.ts
@@ -90,7 +90,7 @@ export class ExtensionsDownloader extends Disposable {
 	private async cleanUp(): Promise<void> {
 		try {
 			if (!(await this.fileService.exists(this.extensionsDownloadDir))) {
-				this.logService.trace('Extension VSIX downlads cache dir does not exist');
+				this.logService.trace('Extension VSIX downloads cache dir does not exist');
 				return;
 			}
 			const folderStat = await this.fileService.resolve(this.extensionsDownloadDir, { resolveMetadata: true });
diff --git a/vscode-1.56.2/src/vs/platform/extensionManagement/node/extensionsScanner.ts b/vscode/src/vs/platform/extensionManagement/node/extensionsScanner.ts
index 06de9ae..ffec784 100644
--- a/vscode-1.56.2/src/vs/platform/extensionManagement/node/extensionsScanner.ts
+++ b/vscode/src/vs/platform/extensionManagement/node/extensionsScanner.ts
@@ -98,7 +98,7 @@ export class ExtensionsScanner extends Disposable {
 	}
 
 	async scanAllUserExtensions(): Promise<ILocalExtension[]> {
-		return this.scanExtensionsInDir(this.extensionsPath, ExtensionType.User);
+		return this.scanExtensionsInDirs(this.extensionsPath, this.environmentService.extraExtensionPaths, ExtensionType.User);
 	}
 
 	async extractUserExtension(identifierWithVersion: ExtensionIdentifierWithVersion, zipPath: string, token: CancellationToken): Promise<ILocalExtension> {
@@ -274,6 +274,7 @@ export class ExtensionsScanner extends Disposable {
 		return [...systemExtensions, ...devSystemExtensions];
 	}
 
+
 	private async scanExtensionsInDir(dir: string, type: ExtensionType): Promise<ILocalExtension[]> {
 		const limiter = new Limiter<any>(10);
 		const stat = await this.fileService.resolve(URI.file(dir));
@@ -314,7 +315,7 @@ export class ExtensionsScanner extends Disposable {
 	}
 
 	private async scanDefaultSystemExtensions(): Promise<ILocalExtension[]> {
-		const result = await this.scanExtensionsInDir(this.systemExtensionsPath, ExtensionType.System);
+		const result = await this.scanExtensionsInDirs(this.systemExtensionsPath, this.environmentService.extraBuiltinExtensionPaths, ExtensionType.System);
 		this.logService.trace('Scanned system extensions:', result.length);
 		return result;
 	}
@@ -418,4 +419,9 @@ export class ExtensionsScanner extends Disposable {
 			}
 		});
 	}
+
+	private async scanExtensionsInDirs(dir: string, dirs: string[], type: ExtensionType): Promise<ILocalExtension[]>{
+		const results = await Promise.all([dir, ...dirs].map((path) => this.scanExtensionsInDir(path, type)));
+		return results.reduce((flat, current) => flat.concat(current), []);
+	}
 }
diff --git a/vscode-1.56.2/src/vs/platform/product/common/product.ts b/vscode/src/vs/platform/product/common/product.ts
index d79c8a3..a0e1e4c 100644
--- a/vscode-1.56.2/src/vs/platform/product/common/product.ts
+++ b/vscode/src/vs/platform/product/common/product.ts
@@ -73,6 +73,12 @@ else {
 			],
 		});
 	}
+	// NOTE@coder: Add the ability to inject settings from the server.
+	const el = document.getElementById('vscode-remote-product-configuration');
+	const rawProductConfiguration = el && el.getAttribute('data-settings');
+	if (rawProductConfiguration) {
+		Object.assign(product, JSON.parse(rawProductConfiguration));
+	}
 }
 
 export default product;
diff --git a/vscode-1.56.2/src/vs/platform/remote/browser/browserSocketFactory.ts b/vscode/src/vs/platform/remote/browser/browserSocketFactory.ts
index 2f343e8..c65de8a 100644
--- a/vscode-1.56.2/src/vs/platform/remote/browser/browserSocketFactory.ts
+++ b/vscode/src/vs/platform/remote/browser/browserSocketFactory.ts
@@ -208,7 +208,8 @@ export class BrowserSocketFactory implements ISocketFactory {
 	}
 
 	connect(host: string, port: number, query: string, callback: IConnectCallback): void {
-		const socket = this._webSocketFactory.create(`ws://${/:/.test(host) ? `[${host}]` : host}:${port}/?${query}&skipWebSocketFrames=false`);
+		// NOTE@coder: Modified to work against the current path.
+		const socket = this._webSocketFactory.create(`${window.location.protocol === 'https:' ? 'wss' : 'ws'}://${window.location.host}${window.location.pathname}?${query}&skipWebSocketFrames=false`);
 		const errorListener = socket.onError((err) => callback(err, undefined));
 		socket.onOpen(() => {
 			errorListener.dispose();
@@ -216,6 +217,3 @@ export class BrowserSocketFactory implements ISocketFactory {
 		});
 	}
 }
-
-
-
diff --git a/vscode-1.56.2/src/vs/platform/remote/common/remoteAgentConnection.ts b/vscode/src/vs/platform/remote/common/remoteAgentConnection.ts
index 4147598..e36cc6b 100644
--- a/vscode-1.56.2/src/vs/platform/remote/common/remoteAgentConnection.ts
+++ b/vscode/src/vs/platform/remote/common/remoteAgentConnection.ts
@@ -229,7 +229,9 @@ async function connectToRemoteExtensionHostAgent(options: ISimpleConnectionOptio
 
 	let socket: ISocket;
 	try {
-		socket = await createSocket(options.logService, options.socketFactory, options.host, options.port, `reconnectionToken=${options.reconnectionToken}&reconnection=${options.reconnectionProtocol ? 'true' : 'false'}`, timeoutCancellationToken);
+		// NOTE@coder: Add connection type to the socket. This is so they can be
+		// distinguished by the backend.
+		socket = await createSocket(options.logService, options.socketFactory, options.host, options.port, `type=${connectionTypeToString(connectionType)}&reconnectionToken=${options.reconnectionToken}&reconnection=${options.reconnectionProtocol ? 'true' : 'false'}`, timeoutCancellationToken);
 	} catch (error) {
 		options.logService.error(`${logPrefix} socketFactory.connect() failed or timed out. Error:`);
 		options.logService.error(error);
diff --git a/vscode-1.56.2/src/vs/platform/storage/common/storage.ts b/vscode/src/vs/platform/storage/common/storage.ts
index faecb26..48f3829 100644
--- a/vscode-1.56.2/src/vs/platform/storage/common/storage.ts
+++ b/vscode/src/vs/platform/storage/common/storage.ts
@@ -106,7 +106,7 @@ export interface IStorageService {
 	 * @param target allows to define the target of the storage operation
 	 * to either the current machine or user.
 	 */
-	store(key: string, value: string | boolean | number | undefined | null, scope: StorageScope, target: StorageTarget): void;
+	store(key: string, value: string | boolean | number | undefined | null, scope: StorageScope, target: StorageTarget): Promise<void> | void;
 
 	/**
 	 * Delete an element stored under the provided key from storage.
diff --git a/vscode-1.56.2/src/vs/workbench/api/browser/mainThreadStorage.ts b/vscode/src/vs/workbench/api/browser/mainThreadStorage.ts
index 5cb658e..0206ff9 100644
--- a/vscode-1.56.2/src/vs/workbench/api/browser/mainThreadStorage.ts
+++ b/vscode/src/vs/workbench/api/browser/mainThreadStorage.ts
@@ -62,12 +62,12 @@ export class MainThreadStorage implements MainThreadStorageShape {
 		return JSON.parse(jsonValue);
 	}
 
-	$setValue(shared: boolean, key: string, value: object): Promise<void> {
+	async $setValue(shared: boolean, key: string, value: object): Promise<void> {
 		let jsonValue: string;
 		try {
 			jsonValue = JSON.stringify(value);
 			// Extension state is synced separately through extensions
-			this._storageService.store(key, jsonValue, shared ? StorageScope.GLOBAL : StorageScope.WORKSPACE, StorageTarget.MACHINE);
+			await this._storageService.store(key, jsonValue, shared ? StorageScope.GLOBAL : StorageScope.WORKSPACE, StorageTarget.MACHINE);
 		} catch (err) {
 			return Promise.reject(err);
 		}
diff --git a/vscode-1.56.2/src/vs/workbench/api/node/extHostCLIServer.ts b/vscode/src/vs/workbench/api/node/extHostCLIServer.ts
index 6177f03..d5bc09a 100644
--- a/vscode-1.56.2/src/vs/workbench/api/node/extHostCLIServer.ts
+++ b/vscode/src/vs/workbench/api/node/extHostCLIServer.ts
@@ -11,6 +11,8 @@ import { IWindowOpenable, IOpenWindowOptions } from 'vs/platform/windows/common/
 import { URI } from 'vs/base/common/uri';
 import { hasWorkspaceFileExtension } from 'vs/platform/workspaces/common/workspaces';
 import { ILogService } from 'vs/platform/log/common/log';
+import { join } from 'vs/base/common/path';
+import { tmpdir } from 'os';
 
 export interface OpenCommandPipeArgs {
 	type: 'open';
@@ -67,6 +69,11 @@ export class CLIServerBase {
 	}
 
 	private async setup(): Promise<string> {
+		// NOTE@coder: Write this out so we can get the most recent path.
+		fs.promises.writeFile(join(tmpdir(), 'vscode-ipc'), this._ipcHandlePath).catch((error) => {
+			this.logService.error(error);
+		});
+
 		try {
 			this._server.listen(this.ipcHandlePath);
 			this._server.on('error', err => this.logService.error(err));
diff --git a/vscode-1.56.2/src/vs/workbench/browser/parts/dialogs/dialogHandler.ts b/vscode/src/vs/workbench/browser/parts/dialogs/dialogHandler.ts
index 84c51a9..2defb9e 100644
--- a/vscode-1.56.2/src/vs/workbench/browser/parts/dialogs/dialogHandler.ts
+++ b/vscode/src/vs/workbench/browser/parts/dialogs/dialogHandler.ts
@@ -144,11 +144,12 @@ export class BrowserDialogHandler implements IDialogHandler {
 	async about(): Promise<void> {
 		const detailString = (useAgo: boolean): string => {
 			return localize('aboutDetail',
-				"Version: {0}\nCommit: {1}\nDate: {2}\nBrowser: {3}",
+				"code-server: v{4}\n VS Code: v{0}\nCommit: {1}\nDate: {2}\nBrowser: {3}",
 				this.productService.version || 'Unknown',
 				this.productService.commit || 'Unknown',
 				this.productService.date ? `${this.productService.date}${useAgo ? ' (' + fromNow(new Date(this.productService.date), true) + ')' : ''}` : 'Unknown',
-				navigator.userAgent
+				navigator.userAgent,
+				this.productService.codeServerVersion || 'Unknown',
 			);
 		};
 
diff --git a/vscode-1.56.2/src/vs/workbench/browser/web.main.ts b/vscode/src/vs/workbench/browser/web.main.ts
index d5bf209..61d5dfe 100644
--- a/vscode-1.56.2/src/vs/workbench/browser/web.main.ts
+++ b/vscode/src/vs/workbench/browser/web.main.ts
@@ -39,6 +39,7 @@ import { BufferLogService } from 'vs/platform/log/common/bufferLog';
 import { FileLogger } from 'vs/platform/log/common/fileLog';
 import { toLocalISOString } from 'vs/base/common/date';
 import { isWorkspaceToOpen, isFolderToOpen } from 'vs/platform/windows/common/windows';
+import { initialize } from 'vs/server/browser/client';
 import { getSingleFolderWorkspaceIdentifier, getWorkspaceIdentifier } from 'vs/workbench/services/workspaces/browser/workspaces';
 import { coalesce } from 'vs/base/common/arrays';
 import { InMemoryFileSystemProvider } from 'vs/platform/files/common/inMemoryFilesystemProvider';
@@ -95,6 +96,7 @@ class BrowserMain extends Disposable {
 		// Startup
 		const instantiationService = workbench.startup();
 
+		await initialize(services.serviceCollection);
 		// Window
 		this._register(instantiationService.createInstance(BrowserWindow));
 
diff --git a/vscode-1.56.2/src/vs/workbench/common/resources.ts b/vscode/src/vs/workbench/common/resources.ts
index f99661f..9800194 100644
--- a/vscode-1.56.2/src/vs/workbench/common/resources.ts
+++ b/vscode/src/vs/workbench/common/resources.ts
@@ -16,6 +16,7 @@ import { ParsedExpression, IExpression, parse } from 'vs/base/common/glob';
 import { IWorkspaceContextService } from 'vs/platform/workspace/common/workspace';
 import { IConfigurationService, IConfigurationChangeEvent } from 'vs/platform/configuration/common/configuration';
 import { withNullAsUndefined } from 'vs/base/common/types';
+import { Schemas } from 'vs/base/common/network';
 
 export class ResourceContextKey extends Disposable implements IContextKey<URI> {
 
@@ -75,7 +76,8 @@ export class ResourceContextKey extends Disposable implements IContextKey<URI> {
 		if (!ResourceContextKey._uriEquals(this._resourceKey.get(), value)) {
 			this._contextKeyService.bufferChangeEvents(() => {
 				this._resourceKey.set(value);
-				this._schemeKey.set(value ? value.scheme : null);
+				// NOTE@coder: Fixes source control context menus (#1104).
+				this._schemeKey.set(value ? (value.scheme === Schemas.vscodeRemote ? Schemas.file : value.scheme) : null);
 				this._filenameKey.set(value ? basename(value) : null);
 				this._dirnameKey.set(value ? dirname(value).fsPath : null);
 				this._pathKey.set(value ? value.fsPath : null);
diff --git a/vscode-1.56.2/src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts b/vscode/src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts
index 8646d37..e09a04d 100644
--- a/vscode-1.56.2/src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts
+++ b/vscode/src/vs/workbench/contrib/extensions/browser/extensionsViewlet.ts
@@ -27,7 +27,7 @@ import { IProgressService, ProgressLocation } from 'vs/platform/progress/common/
 import { IEditorGroupsService } from 'vs/workbench/services/editor/common/editorGroupsService';
 import Severity from 'vs/base/common/severity';
 import { IActivityService, NumberBadge } from 'vs/workbench/services/activity/common/activity';
-import { IThemeService } from 'vs/platform/theme/common/themeService';
+import { IThemeService, registerThemingParticipant } from 'vs/platform/theme/common/themeService';
 import { IConfigurationService } from 'vs/platform/configuration/common/configuration';
 import { IViewsRegistry, IViewDescriptor, Extensions, ViewContainer, IViewDescriptorService, IAddedViewDescriptorRef } from 'vs/workbench/common/views';
 import { IStorageService, StorageScope, StorageTarget } from 'vs/platform/storage/common/storage';
@@ -56,6 +56,7 @@ import { SIDE_BAR_DRAG_AND_DROP_BACKGROUND } from 'vs/workbench/common/theme';
 import { IWorkbenchEnvironmentService } from 'vs/workbench/services/environment/common/environmentService';
 import { WorkbenchStateContext } from 'vs/workbench/browser/contextkeys';
 import { ICommandService } from 'vs/platform/commands/common/commands';
+import { textLinkForeground } from 'vs/platform/theme/common/colorRegistry';
 import { isWeb } from 'vs/base/common/platform';
 import { installLocalInRemoteIcon } from 'vs/workbench/contrib/extensions/browser/extensionsIcons';
 import { registerAction2, Action2, MenuId } from 'vs/platform/actions/common/actions';
@@ -513,6 +514,47 @@ export class ExtensionsViewPaneContainer extends ViewPaneContainer implements IE
 		overlay.style.backgroundColor = overlayBackgroundColor;
 		hide(overlay);
 
+		// NOTE@coder this UI element helps users understand the extension marketplace divergence
+		const extensionHelperLocalStorageKey = 'coder.extension-help-message';
+
+		if (localStorage.getItem(extensionHelperLocalStorageKey) === null) {
+			const helperHeader = append(this.root, $('.header'));
+			helperHeader.id = 'codeServerMarketplaceHelper';
+			helperHeader.style.height = 'auto';
+			helperHeader.style.fontWeight = '600';
+			helperHeader.style.padding = 'padding: 5px 16px';
+			helperHeader.style.position = 'relative';
+
+			const helperText = append(helperHeader, $('div'));
+
+			// We call this function because it gives us access to the current theme
+			// Then we can apply the link color to the links in the helper header
+			registerThemingParticipant((theme) => {
+				const linkColor = theme.getColor(textLinkForeground);
+				helperText.innerHTML = `
+				<div style="margin-bottom: 8px;">
+				<p style="margin-bottom: 0; display: flex; align-items: center"><span class="codicon codicon-warning" style="margin-right: 2px; color: #C4A103"></span>WARNING</p>
+				<p style="margin-top: 0; margin-bottom: 4px">
+				These extensions are not official. Find additional open-source extensions
+				<a style="color: ${linkColor}" href="https://open-vsx.org/" target="_blank">here</a>.
+				See <a style="color: ${linkColor}" href="https://github.com/cdr/code-server/blob/master/docs/FAQ.md#differences-compared-to-vs-code" target="_blank">docs</a>.
+				</p>
+				</div>
+						`;
+			});
+
+			const dismiss = append(helperHeader, $('span'));
+			dismiss.innerHTML = 'Dismiss';
+			dismiss.style.display = 'block';
+			dismiss.style.textAlign = 'right';
+			dismiss.style.cursor = 'pointer';
+			dismiss.tabIndex = 0;
+			dismiss.onclick = () => {
+				helperHeader.remove();
+				localStorage.setItem(extensionHelperLocalStorageKey, 'viewed');
+			};
+		}
+
 		const header = append(this.root, $('.header'));
 		const placeholder = localize('searchExtensions', "Search Extensions in Marketplace");
 		const searchValue = this.searchViewletState['query.value'] ? this.searchViewletState['query.value'] : '';
diff --git a/vscode-1.56.2/src/vs/workbench/contrib/scm/browser/media/scm.css b/vscode/src/vs/workbench/contrib/scm/browser/media/scm.css
index 5afa88d..7f6884c 100644
--- a/vscode-1.56.2/src/vs/workbench/contrib/scm/browser/media/scm.css
+++ b/vscode/src/vs/workbench/contrib/scm/browser/media/scm.css
@@ -144,9 +144,11 @@
 	margin-right: 8px;
 }
 
-.scm-view .monaco-list .monaco-list-row .resource > .name > .monaco-icon-label > .actions {
-	flex-grow: 100;
-}
+/* NOTE@coder: Causes the label to shrink to zero width in Firefox due to
+ * overflow:hidden. This isn't right anyway, as far as I can tell. */
+/* .scm-view .monaco-list .monaco-list-row .resource > .name > .monaco-icon-label > .actions { */
+/* 	flex-grow: 100; */
+/* } */
 
 .scm-view .monaco-list .monaco-list-row .resource-group > .actions,
 .scm-view .monaco-list .monaco-list-row .resource > .name > .monaco-icon-label > .actions {
diff --git a/vscode-1.56.2/src/vs/workbench/contrib/welcome/page/browser/vs_code_welcome_page.ts b/vscode/src/vs/workbench/contrib/welcome/page/browser/vs_code_welcome_page.ts
index a405271..af4cb68 100644
--- a/vscode-1.56.2/src/vs/workbench/contrib/welcome/page/browser/vs_code_welcome_page.ts
+++ b/vscode/src/vs/workbench/contrib/welcome/page/browser/vs_code_welcome_page.ts
@@ -4,6 +4,7 @@
  *--------------------------------------------------------------------------------------------*/
 
 import { escape } from 'vs/base/common/strings';
+import product from 'vs/platform/product/common/product';
 import { localize } from 'vs/nls';
 
 export default () => `
@@ -11,7 +12,7 @@ export default () => `
 	<div class="welcomePage" role="document">
 		<div class="title">
 			<h1 class="caption">${escape(localize('welcomePage.vscode', "Visual Studio Code"))}</h1>
-			<p class="subtitle detail">${escape(localize({ key: 'welcomePage.editingEvolved', comment: ['Shown as subtitle on the Welcome page.'] }, "Editing evolved"))}</p>
+			<p class="subtitle detail">VS Code v${product.version}</p>
 		</div>
 		<div class="row">
 			<div class="splash">
@@ -19,7 +20,7 @@ export default () => `
 					<h2 class="caption">${escape(localize('welcomePage.start', "Start"))}</h2>
 					<ul>
 						<li><a href="command:workbench.action.files.newUntitledFile">${escape(localize('welcomePage.newFile', "New file"))}</a></li>
-						<li class="mac-only"><a href="command:workbench.action.files.openFileFolder">${escape(localize('welcomePage.openFolder', "Open folder..."))}</a> or <a href="command:git.clone">${escape(localize('welcomePage.gitClone', "clone repository..."))}</a></li>
+						<li class="mac-only"><a href="command:workbench.action.files.openFolder">${escape(localize('welcomePage.openFolder', "Open folder..."))}</a> or <a href="command:git.clone">${escape(localize('welcomePage.gitClone', "clone repository..."))}</a></li>
 						<li class="windows-only linux-only"><a href="command:workbench.action.files.openFolder">${escape(localize('welcomePage.openFolder', "Open folder..."))}</a> or <a href="command:git.clone">${escape(localize('welcomePage.gitClone', "clone repository..."))}</a></li>
 					</ul>
 				</div>
@@ -31,6 +32,19 @@ export default () => `
 					</ul>
 					<p class="none detail">${escape(localize('welcomePage.noRecentFolders', "No recent folders"))}</p>
 				</div>
+				<div class="section help">
+					<h2 class="caption">code-server ${escape(localize('welcomePage.help', "Help"))}</h2>
+					<ul>
+						<li><a href="https://github.com/cdr/code-server">GitHub Repository</a></li>
+						<li><a href="https://github.com/cdr/code-server/releases/tag/v${product.codeServerVersion}">Release Notes</a></li>
+						<li><a href="https://github.com/cdr/code-server/issues">Issue Tracker</a></li>
+						<li><a href="https://github.com/cdr/code-server/blob/master/docs/FAQ.md">FAQ</a></li>
+						<li><a href="https://github.com/cdr/code-server/blob/master/docs/guide.md">Setup Guide</a></li>
+						<li><a href="https://github.com/cdr/code-server/tree/master/docs">Docs</a></li>
+						<li><a href="https://github.com/cdr/code-server/discussions">Discussions</a></li>
+						<li><a href="https://cdr.co/join-community">Slack</a></li>
+					</ul>
+				</div>
 				<div class="section help">
 					<h2 class="caption">${escape(localize('welcomePage.help', "Help"))}</h2>
 					<ul>
diff --git a/vscode-1.56.2/src/vs/workbench/contrib/welcome/page/browser/welcomePage.css b/vscode/src/vs/workbench/contrib/welcome/page/browser/welcomePage.css
index 76546c3..2608762 100644
--- a/vscode-1.56.2/src/vs/workbench/contrib/welcome/page/browser/welcomePage.css
+++ b/vscode/src/vs/workbench/contrib/welcome/page/browser/welcomePage.css
@@ -94,7 +94,7 @@
 }
 
 .monaco-workbench .part.editor > .content .welcomePage .splash .section {
-	margin-bottom: 5em;
+	margin-bottom: 3em;
 }
 
 .monaco-workbench .part.editor > .content .welcomePage .splash ul {
diff --git a/vscode-1.56.2/src/vs/workbench/contrib/welcome/page/browser/welcomePage.ts b/vscode/src/vs/workbench/contrib/welcome/page/browser/welcomePage.ts
index 8471fa8..cb20a4c 100644
--- a/vscode-1.56.2/src/vs/workbench/contrib/welcome/page/browser/welcomePage.ts
+++ b/vscode/src/vs/workbench/contrib/welcome/page/browser/welcomePage.ts
@@ -450,7 +450,7 @@ class WelcomePage extends Disposable {
 
 		const prodName = container.querySelector('.welcomePage .title .caption') as HTMLElement;
 		if (prodName) {
-			prodName.textContent = this.productService.nameLong;
+			prodName.textContent = `code-server v${this.productService.codeServerVersion}`;
 		}
 
 		recentlyOpened.then(({ workspaces }) => {
diff --git a/vscode-1.56.2/src/vs/workbench/services/environment/browser/environmentService.ts b/vscode/src/vs/workbench/services/environment/browser/environmentService.ts
index 92da686..4bbd3c4 100644
--- a/vscode-1.56.2/src/vs/workbench/services/environment/browser/environmentService.ts
+++ b/vscode/src/vs/workbench/services/environment/browser/environmentService.ts
@@ -120,8 +120,25 @@ export class BrowserWorkbenchEnvironmentService implements IWorkbenchEnvironment
 	@memoize
 	get logFile(): URI { return joinPath(this.options.logsPath, 'window.log'); }
 
+	// NOTE@coder: Use the same path in // ../../../../platform/environment/node/environmentService.ts
+	// and don't use the user data scheme. This solves two problems:
+	//  1. Extensions running in the browser (like Vim) might use these paths
+	//     directly instead of using the file service and most likely can't write
+	//     to `/User` on disk.
+	//  2. Settings will be stored in the file system instead of in browser
+	//     storage. Using browser storage makes sharing or seeding settings
+	//     between browsers difficult. We may want to revisit this once/if we get
+	//     settings sync.
 	@memoize
-	get userRoamingDataHome(): URI { return URI.file('/User').with({ scheme: Schemas.userData }); }
+	get userRoamingDataHome(): URI { return joinPath(URI.file(this.userDataPath).with({ scheme: Schemas.vscodeRemote }), 'User'); }
+	@memoize
+	get userDataPath(): string {
+		const dataPath = this.payload?.get('userDataPath');
+		if (!dataPath) {
+			throw new Error('userDataPath was not provided to environment service');
+		}
+		return dataPath;
+	}
 
 	@memoize
 	get settingsResource(): URI { return joinPath(this.userRoamingDataHome, 'settings.json'); }
@@ -324,7 +341,12 @@ export class BrowserWorkbenchEnvironmentService implements IWorkbenchEnvironment
 						extensionHostDebugEnvironment.params.port = parseInt(value);
 						break;
 					case 'enableProposedApi':
-						extensionHostDebugEnvironment.extensionEnabledProposedApi = [];
+						try {
+							extensionHostDebugEnvironment.extensionEnabledProposedApi = JSON.parse(value);
+						} catch (error) {
+							console.error(error);
+							extensionHostDebugEnvironment.extensionEnabledProposedApi = [];
+						}
 						break;
 				}
 			}
diff --git a/vscode-1.56.2/src/vs/workbench/services/extensionManagement/browser/extensionEnablementService.ts b/vscode/src/vs/workbench/services/extensionManagement/browser/extensionEnablementService.ts
index 744731e..3683aa8 100644
--- a/vscode-1.56.2/src/vs/workbench/services/extensionManagement/browser/extensionEnablementService.ts
+++ b/vscode/src/vs/workbench/services/extensionManagement/browser/extensionEnablementService.ts
@@ -267,7 +267,7 @@ export class ExtensionEnablementService extends Disposable implements IWorkbench
 					}
 				}
 			}
-			return true;
+			return false; // NOTE@coder: Don't disable anything by extensionKind.
 		}
 		return false;
 	}
diff --git a/vscode-1.56.2/src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts b/vscode/src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts
index c52be5e..367b1ba 100644
--- a/vscode-1.56.2/src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts
+++ b/vscode/src/vs/workbench/services/extensionManagement/common/extensionManagementService.ts
@@ -23,6 +23,7 @@ import { IDialogService } from 'vs/platform/dialogs/common/dialogs';
 import Severity from 'vs/base/common/severity';
 import { canceled } from 'vs/base/common/errors';
 import { IUserDataAutoSyncEnablementService, IUserDataSyncResourceEnablementService, SyncResource } from 'vs/platform/userDataSync/common/userDataSync';
+import { isWeb } from 'vs/base/common/platform';
 import { Promises } from 'vs/base/common/async';
 import { IWorkspaceTrustRequestService } from 'vs/platform/workspace/common/workspaceTrust';
 import { IExtensionManifestPropertiesService } from 'vs/workbench/services/extensions/common/extensionManifestPropertiesService';
@@ -307,6 +308,11 @@ export class ExtensionManagementService extends Disposable implements IWorkbench
 			}
 		}
 
+		// NOTE@coder: Fall back to installing on the remote server on web.
+		if (isWeb && this.extensionManagementServerService.remoteExtensionManagementServer) {
+			return this.extensionManagementServerService.remoteExtensionManagementServer;
+		}
+
 		// Local server can accept any extension. So return local server if not compatible server found.
 		return this.extensionManagementServerService.localExtensionManagementServer;
 	}
diff --git a/vscode-1.56.2/src/vs/workbench/services/extensions/browser/extensionService.ts b/vscode/src/vs/workbench/services/extensions/browser/extensionService.ts
index 837f644..c0722af 100644
--- a/vscode-1.56.2/src/vs/workbench/services/extensions/browser/extensionService.ts
+++ b/vscode/src/vs/workbench/services/extensions/browser/extensionService.ts
@@ -196,7 +196,7 @@ export class ExtensionService extends AbstractExtensionService implements IExten
 
 		const result = this._registry.deltaExtensions(remoteExtensions.concat(localExtensions), []);
 		if (result.removedDueToLooping.length > 0) {
-			this._logOrShowMessage(Severity.Error, nls.localize('looping', "The following extensions contain dependency loops and have been disabled: {0}", result.removedDueToLooping.map(e => `'${e.identifier.value}'`).join(', ')));
+			this._logOrShowMessage(Severity.Error, nls.localize('looping', 'The following extensions contain dependency loops and have been disabled: {0}', result.removedDueToLooping.map(e => `'${e.identifier.value}'`).join(', ')));
 		}
 
 		if (remoteEnv && remoteAgentConnection) {
diff --git a/vscode-1.56.2/src/vs/workbench/services/extensions/node/extensionHostProcessSetup.ts b/vscode/src/vs/workbench/services/extensions/node/extensionHostProcessSetup.ts
index 96ab14e..5abd3c0 100644
--- a/vscode-1.56.2/src/vs/workbench/services/extensions/node/extensionHostProcessSetup.ts
+++ b/vscode/src/vs/workbench/services/extensions/node/extensionHostProcessSetup.ts
@@ -17,11 +17,12 @@ import { IInitData } from 'vs/workbench/api/common/extHost.protocol';
 import { MessageType, createMessageOfType, isMessageOfType, IExtHostSocketMessage, IExtHostReadyMessage, IExtHostReduceGraceTimeMessage, ExtensionHostExitCode } from 'vs/workbench/services/extensions/common/extensionHostProtocol';
 import { ExtensionHostMain, IExitFn } from 'vs/workbench/services/extensions/common/extensionHostMain';
 import { VSBuffer } from 'vs/base/common/buffer';
-import { IURITransformer, URITransformer, IRawURITransformer } from 'vs/base/common/uriIpc';
+import { IURITransformer, URITransformer } from 'vs/base/common/uriIpc';
 import { exists } from 'vs/base/node/pfs';
 import { realpath } from 'vs/base/node/extpath';
 import { IHostUtils } from 'vs/workbench/api/common/extHostExtensionService';
 import { RunOnceScheduler } from 'vs/base/common/async';
+import * as proxyAgent from 'vs/base/node/proxy_agent';
 
 import 'vs/workbench/api/common/extHost.common.services';
 import 'vs/workbench/api/node/extHost.node.services';
@@ -137,8 +138,11 @@ function _createExtHostProtocol(): Promise<PersistentProtocol> {
 
 						// Wait for rich client to reconnect
 						protocol.onSocketClose(() => {
-							// The socket has closed, let's give the renderer a certain amount of time to reconnect
-							disconnectRunner1.schedule();
+							// NOTE@coder: Inform the server so we can manage offline
+							// connections there instead. Our goal is to persist connections
+							// forever (to a reasonable point) to account for things like
+							// hibernating overnight.
+							process.send!({ type: 'VSCODE_EXTHOST_DISCONNECTED' });
 						});
 					}
 				}
@@ -309,6 +313,8 @@ function connectToRenderer(protocol: IMessagePassingProtocol): Promise<IRenderer
 }
 
 export async function startExtensionHostProcess(): Promise<void> {
+	proxyAgent.monkeyPatch(true);
+
 	performance.mark(`code/extHost/willConnectToRenderer`);
 	const protocol = await createExtHostProtocol();
 	performance.mark(`code/extHost/didConnectToRenderer`);
@@ -329,11 +335,9 @@ export async function startExtensionHostProcess(): Promise<void> {
 
 	// Attempt to load uri transformer
 	let uriTransformer: IURITransformer | null = null;
-	if (initData.remote.authority && args.uriTransformerPath) {
+	if (initData.remote.authority) {
 		try {
-			const rawURITransformerFactory = <any>require.__$__nodeRequire(args.uriTransformerPath);
-			const rawURITransformer = <IRawURITransformer>rawURITransformerFactory(initData.remote.authority);
-			uriTransformer = new URITransformer(rawURITransformer);
+			uriTransformer = new URITransformer(initData.remote.authority);
 		} catch (e) {
 			console.error(e);
 		}
diff --git a/vscode-1.56.2/src/vs/workbench/workbench.web.main.ts b/vscode/src/vs/workbench/workbench.web.main.ts
index 054db75..5fb6925 100644
--- a/vscode-1.56.2/src/vs/workbench/workbench.web.main.ts
+++ b/vscode/src/vs/workbench/workbench.web.main.ts
@@ -42,7 +42,8 @@ import 'vs/workbench/services/keybinding/browser/keyboardLayoutService';
 import 'vs/workbench/services/extensions/browser/extensionService';
 import 'vs/workbench/services/extensionManagement/common/extensionManagementServerService';
 import 'vs/workbench/services/extensionManagement/browser/extensionUrlTrustService';
-import 'vs/workbench/services/telemetry/browser/telemetryService';
+// NOTE@coder: We send it all to the server side to be processed there instead.
+// import 'vs/workbench/services/telemetry/browser/telemetryService';
 import 'vs/workbench/services/credentials/browser/credentialsService';
 import 'vs/workbench/services/url/browser/urlService';
 import 'vs/workbench/services/update/browser/updateService';
